Aug 6.
1 - ssh login enumeration :
	Used hydra to brute force credentials over port 22 ssh.
	To prove we could do this on a remote system (pivoting if we did not have access to hydra, but could still send a payload through metasploit), did an alternate method of brute forcing through an auxiliart/scanner/ssh/ssh_login, using the same wordlists as in Hydra.
	The second method is more of a leapfrog when the attack machine is not directly in contact with the target. Still a good proof of concept.
interesting commands


2 - command injection via print f for escalation:
	scenario starts with a compromised machine, where the goal is privilege escalation.

	operative injection, allowing the student profile to have sudo access with no password needed
	printf ‘#! /bin/bash\necho “student ALL=NOPASSWD:ALL” >> /etc/sudoers’ > /urs/local/share/copy.sh

	grep -nri “target text” /usr - looks for target text in files starting from target directory /usr in this case. 
	(useful for finding specific calls to files or paths made in something like a shell script)



Aug 5.
1 - exploit DB C code compile:
example of researching vulnerability based on things like os version in exploit DB.
Upload and compile C code to remotely execute.

2- ftp brute force-
A straightforward use of hydra to brute force ftp.
-L is the entry for logon, and -P us the tack for passwords, usually you put files in both of these like /usr/share/metasploit-framework/data/wordlists/unix_passwords.txt
Exploring the wordlists or finding some on github, like the rockyou text list might be good too... extraneous to the exercise though.

Aug. 4:
1 - Http shellshock user agent command injection:
nmap -sV shows port 80 with apache httpd 2.4.6, but a countdown timer running a cgi script is our real foot in the door.
use burpsuite to send a request to the .cgi url resource, then change the user-agent to contain executable code.
Proof of concept draws out the contents of /etc/passwd;
could potentially be used as an upload vector in a similar scenario.

2 - mimikatz hashdump, badblue
nmap -sV shows a service with badblue running, so we search for this funny keyword in Metasploit.
Badblue exploit gives a meterpreter session, but we need to get a hashdump.
make the temp folder, upload mimikatz onto the target, pop open a shell, and execute mimikatz on the target itself.
Command: lsadump::sam gives us important info like SysKey SAMKey and ntlm hashes
command: lsadump::secrets gives us the hashes for the SysKey.
Cracking is out-of-scope, and will take place in future labs.

Aug. 3:
1 - windows unattend - privelege escalation using powersploit. Powershell bypass to avoid execution permission denial with command `powershell -ep bypass`
Searches through standard file path C:\Windows\Panther\Unattend.xml or Autounattend.xml to get data.
Hashed data decrypted via CLI using base64 -d
powersploit runas.exe --> allowed us to open a command line prompt as admin
open an hta server and get a reverse tcp upload to open a meterpreter session on target.

2-hiding a file in metadata -
a simple exercise hiding a text file in the metadata of another text file.
Command line : notepad file1.txt:file2.txt will make file2.txt hidden. You can still open it from cli, but in explorer they can only open the first one.
Memory giveaways unknown. Can seed data by doing this with a word doc and having pictures put into the dummy document to make it believably bloated.

2 HSF http file server vulnerability and impersonation -
Rejetto in metasploit attacks hsf --> rejetto_hfs_exec
using the SeImpersonate Privilege ability for our low-level account, we can load incognito.
list tokens to find the admin we want to impersonate (can also help with lateral movement)
pgrep lets us move meterpreter to a stable process, after which we reload the meterpreter session by popping the exploit rejetto a second time.
Then we can access the admin's C drive, who we're impersonating, and snoop files

August 2:
WinRM lab report completed, 
use crackmap.exe to brute force credentials after finding a port open on 5985, matching the WinRM service.
SAMPLE: [crackmapexec winrm 10.4.16.48 -u administrator -p /usr/share/metasploit-framework/data/wordlists/unix_passwords.txt] 
Open a shell over winrm with " evil-winrm.rb "

RDP exploitation completed:
Gist: port 3333 was open, but that's not standard for any service. A scanner showed it was an rdp service, then used hydra to crack the passwords at the target ip address and target port.
finally, "xfreerdp" let us log into the target.

Aug 1:
SMB report in document: (smb ps server exec.docx)
brute force smb login credentials through wordlists.
auxiliary/scanner/smb/smb_login (then set user_file and pass_file to stuff in the wordlists dir, ex: /users/share/metasploit-framework/data/wordlists/common_users.txt)
core command: use windows/smb/psexec -> meterpreter shell after we get credentials

webdav lab: (webdavreport.docx)
enumerate over the target ip with nmap --script http-enum -sV -p 80 10.0.17.27 (the target ip)
using davtest and given credentials, force a login
(assumes an alternate method was used to get credentials, but with them, we now have remote access via a webdav upload)
key msf exploit: exploit/windows/iis/iis_webdav_upload_asp

July 30
SUMMARY:
Simulated credential stuffing attacks with burpsuite, using captured password and username lists to brute force login credentials.
Involved using proxy browser to capture requests and modify them.
Also configured payloads to iterate over a pitchfork-position attack within the intruder functionality of Burpsuite.

Configured a custom macro to capture a session token, so as to bypass logins that required a session token with each login attempt. This targeted specific fields identified in the response request, then used them with the “loginToken” as a header item and the “session” variable as a cookie.

Notes and corrections to coursework on Jul 30, 2024

Actually useful note:
“The Battering Ram attack type is useful when we want to test the same payload against multiple positions at once without the need for sequential substitution” —> the unspoken part here is that Sniper helps with sequential substitution.
It would be more useful to see a table side-by-side showing all fields substituted with the input items in battering ram, as opposed to the combination-lock iterations done with the sniper mode inputs.

The “pitchfork” section only gives one demonstration and fails to iterate, so I cannot clearly explain the significance of that attack mode. 
I think it’s a one-to-one situation where you already have an association made and you’re feeding in possible name/password combos.
A realistic demo would be nice to clarify this, but, as expected, tryHackMe is lacking in that department.

Burpsuite repeater : task 7 
This is taught incorrectly through having no demonstration of what “extreme inputs” means. A hint allegedly says putting in massive numbers or unexpected strings will cause a 500 error, but twelve iterations of giant numbers, strings, and all sorts of combinations of special characters, and I only get 404 errors.
This lesson is just done wrong.

Task 8 kind of explains how to do an sql injection attack with a captured request, which we get by using proxy and feeding in a url. Then, we take the intercepted browser request and send it to repeater for manipulation, running a bunch of SQL statements through an injection vulnerability given how part of the url request is essentially a client-side exposure to the data tables.
None of this is explained clearly in terms of how to identify what statements to use in what circumstances, so the value-add is minimal. 
The example, as usual, is contrived and not particularly informative with such a shallow demonstration. 
The SQL statements ARE clearly documented in this step, allowing for experimentation, but the instructions do not explain what output to look for, nor what its significance is. Yeah, there’s a single screenshot of output, but that’s not enough to cover multiple variations of SQL statements, the progression of which is not clarified at all.

Task 10: practical example:
Repeatedly, the attack box is not working, whereby the proxy will not forward the request and the page just hangs. This happened at multiple stages randomly and made this a headache, not a learning experience.
I have no idea how the workflow is supposed to go because I can’t follow the steps when your browser hangs and no resolution is offered to a problem that’s not even mentioned as a possibility, but becomes a speedbump to the course.

Step 4
“
In the "Positions" sub-tab, ensure that only the username and password parameters are selected. Clear any additional selections, such as session cookies.
“ 
No documentation given as to what these paramaters are in the window. Give a screenshot, not a word salad.

Step 9;
When launching the attack, I thought dismissing the alert window cancels out of the attack. It auto-minimizes the window with no visual indication that it’s still active, nor is there a straightforward alt-tab to get back to it. 
This is not mentioned in the instructions, and is an unexpected program behavior. More clarity is needed in instructions, or screenshots. This is very bad course design to ignore this strange behavior because you can’t see the attack results through the pop-up, and dismissing it minimizes the window. 
Address this issue.

INCORRECT INFO:
The item that is different has a longer response length, not a shorter one as the demonstration claims. I have a screenshot of this to prove it. 
I’m baffled, this is just wrong and you lied to me.

Support login page hangs, this became a roadblock after 20 minutes of trying and retrying with no resolution. Your box is broken and this environment cannot allow me to continue. I’m stuck at logging in as m.rivera with the letmein1 password. The browser does not come up even after forwarding the proxy capture. It’s just broken, so I don’t know what to say. It can’t be done.


task 19, step 9
“
Unfortunately, "recursive grep" won't work here due to the redirect response, so we can't do this entirely within Intruder – we will need to build a macro.
“
You have not introduced what any of these terms mean, let alone demonstrated anything you’re talking about. Why even mention something out of the blue that hasn’t been covered in this lab or in the prerequisites leading up to this lab either?


“As it stands, this macro will now overwrite all of the parameters in our Intruder requests before we send them; this is great, as it means that we will get the loginTokens and session cookies added straight into our requests”
This is word-salad and doesn’t make sense


“Note: You should be getting 302 status code responses for every request in this attack. If you see 403 errors, then your macro is not working properly.”
This note is good
Make more notes like this on the mentioned behavior expectations, such as the browser hanging and the attack window disappearing.

29 July - Try Hack Me, burpsuite and SQL injection
Sql injection

https://tryhackme.com/r/room/sqlinjectionlm

TL;DR
Do labs to learn SQL and to complete objectives, which you can then add to your resume as actual experience.
Reading a list of keywords and their use is like trying to learn a language by reading a dictionary, but never getting real examples of the word in actual conversation. You’re wasting time and you’re not actually practicing the way the thing is used.
BEWARE: Crummy bootcamps actively WANT you to waste your time so you renew your subscription without moving on. If you succeed, these predatory “training” companies are out of a customer.

Relational databases are basically collections of spreadsheets, and you use special words to filter your results of finding entries in the spreadsheets that match certain criteria.
It’s pointless to go into further speculation without examples, and none of the details stick without direct demonstration; sadly this is lacking in any of the training I’ve encountered thus far, thus my own relative ignorance of what any of this means in a practical sense. 
One cannot derive practical application from impractical training scenarios, after all.

A “database” is a term thrown around a lot without people stopping to think about what it actually means. In the context of SQL and relational or non-relational databases, we’re talking about a collection of information. 
I was rather let down to discover how mundane “data” really is. Entries of names or dates of accessing a program are both examples of data. There’s nothing mystical about it, although the way the information may be stored is sometimes cryptic, like how dates could follow a time-delta format as a float number. I don’t want to get distracted by details, but it’s enough to say that there are a lot of such small details that are not covered in any straightforward coding boot-camp or college course, collectively, assemble together into a greater whole of knowledge about what to expect and how you can interact with data.


Blind sql injection uses something like 
' OR 1=1;—
Because we’re trying to close a statement
SELECT * from table1 Where password =’

Usually, the string from the input field is just directly passed in, and something afterward will close the apostrophe, back-tick, or double quotes. We can comment this out with the semicolon and double dash, eliminating any syntax errors by telling the program to ignore any characters coming thereafter.
Syntax may vary, so multiple variations of quotes or backticks might have to be used to accomplish this. This is usually blind injection since we’re probably not going to get any feedback on our failures or not.
The 1=1 is just a flat TRUE statement that we’re using in place of looking for a match (like matching a user-name to a password). Instead of matching, we just return true as if a match has been made, as far as the data is concerned.
….
SELECT * from blog where id=2;--

Which will return the article with an ID of 2 whether it is set to public or not.


Apparently you need to enumerate the number of database columns before you can do anything interesting? Unclear demonstration.
A boolean value (like a username being taken or not) is tampered with using 
admin123' UNION SELECT 1,2,3;-- 
To test if there are 3 columns via union select.
Demonstration is hazy. Refactoring requested for clarification.
Mentions manually cycling through numbers without a programmatic solution — immediately dismissed as plebeian drivel. Show me a bash script or just get to the bloody point.
…

Burpsuite Basics, Room 1

https://tryhackme.com/r/room/burpsuitebasics
TL;DR
This room does not teach anything practical and is a waste. 
Move along to something actually useful. They don’t even set up the demonstrations correctly and you can’t even follow them in the sandbox provided.

Burpsuite targets web as well as mobile applications
Burp proxy allows interception and modification of web requests
	- “So that’s like my web spiders, huh? In python, we use the ‘requests’ library to communicate web requests through an automated script. I’ve used it before to navigate to various urls and then scan their html content for keywords.”
There’s a lot of functionalities in burp suite, and going over them all will make your eyes glaze over, but the sequencer is the only one that jumps out as interesting.
It looks at how random tokens are, possibly finding patterns if the devs were lazy by basing tokens off a simple time delta as opposed to a secure algorithm. A lot of data that looks random to human eyes ain’t so under the hood.

Needed to download and set up Burp Suite Community ver. [Urgh, more downloads and instillation grunt work… best to just go through the motions and get this over with…]

Saying “familiarize yourself with this” without giving a practical demonstration is drivel and dismissed with just as much thought as was put into it. Lazy scrub.
Every theoretical word better play into something of importance, as I’ve literally read through several textbooks of “theory” while encountering zero substantial demonstration therein. I’m here to get practice, not a lecture, so don’t tell me. Show me, or get tossed in the can like the trash you are.


The demonstration could not be properly followed due to improper instruction on how the hell to even send a request in the broken sandbox environment. 
If you don’t give instructions and the program breaks down, I’m not going to scratch my head trying to figure out things you were supposed to include in the lesson plan. 
I’m not going to fill in blanks that you’ve overlooked when you’re supposed to be the content creators. You have failed, again, at making a meaningful room.


Burp suite repeater review:
https://tryhackme.com/r/room/burpsuiterepeater

Words do not constitute a demonstration. There’s a lot of empty fluff before the practical portion, and even when there’s supposedly a hands on part, it skips over actually showing HOW to sent a request via the repeater and how the html pops up. Yes, technically this is documented elsewhere, but I should not have to zig-zag back and forth between pages.


Process;
Enable burpsuite, make sure the burp’s browser allows the browser to open correctly (check settings if the button to open a browser on the proxy tab doesn’t work).
Navigate to the page in the browser
In burpsuite, go to proxy, right click on the HTML soup and send to repeater
Send to get the response 
Use split view to see both request and response html soup at the same time

“Using Inspector (or manually, if you prefer), add a header called FlagAuthorised and set it to have a value of True, as shown below:”

So you pull this variable out of thin air, don’t even explain that it’s some token that’s just magically in our possession, and don’t explain its functionality either? You’re literally making things up, and this is the very essence of a contrived example, failing to DEMONSTRATE anything PRACTICAL.
Great. I’ve learned nothing, and this is a bad lab. Pathetic.

----

[interlude to complete the google cybersecurity cert]

# LabJournal-cybersecurity-
3 July 2024
Splunk and Google Chronicle

Signed up for splunk cloud to run a simulation on a .zip file with the packets simulating network activity.
Reviewed basic search, syntax, and navigation of splunk.

index=main host=mailsv fail* root
Within the main index being examined, find entries with the host of “mailsv” find the keyword “fail*” as connected to events with the keyword “root”.
We want this because we’re looking for failed attempts to access a root account as our objective.

Chronicle:
https://demo.backstory.chronicle.security/?warstory=

Notice! : the time-frame must be adjusted for the year 2023, january 1 to february 24th to capture the proper event timeframe used in this exercise. 
The official google cybersecurity course FAILS TO DOCUMENT THIS time-frame factor, so even the big names got room for improvement when it comes to educational material.


Technical details:
For some reason, the google cybersecurity course really wants you to know these distinctions —>
Splunk searches through ”raw logs”, which is slow, but doesn’t need normalized data
Chronicle searches through UDM, which requires normalized data
Suricata only makes 2 log types. How many log types does suricata make? Only two. Alert and network telemetry.


2 July 2024 https://www.cloudskillsboost.google/focuses/36995032?parent=lti_session

Suricata and logging
sudo suricata -r sample.pcap -S custom.rules -k none
The -r sample.pcap option specifies an input file to mimic network traffic. In this case, the sample.pcap file.
The -S custom.rules option instructs Suricata to use the rules defined in the custom.rules file.
The -k none option instructs Suricata to disable all checksum checks.
Established how to define a rule, examining its component parts, then how to run a custom rule

Eve.json files normally can’t be read by simply using cat; jq is needed;
jq . /var/log/suricata/eve.json | less
Q will quit in less,
F scrolls to next page, B scrolls up to the previous page

Outputs of the jq file can be searched for keywords by “piping” the keyword you want into grep. For example I search for “severity” in this.
jq . /var/log/suricata/eve.json | less | grep "severity"

Further fields can be targeted as such:
jq -c "[.timestamp]" /var/log/suricata/eve.json
(which targets the time-stamp field within the JSON-like strucure)


jq . /var/log/suricata/eve.json | less | grep "alert" -A2    

(get 2 lines after the target is found)
-B is before, -C will give before and after

Exchange the “X” below with a “flow id” and the details for that particular event can be viewed in full.
jq "select(.flow_id==X)" /var/log/suricata/eve.json


1 July 2024:
Wireshark lab : 1hr packet analysis lab https://www.cloudskillsboost.google/focuses/36975220?parent=lti_session

  - simulated network activity with a VM, then captured the activity in wireshark.
  - basic search functions and filtering covered
  - introduced identifying packet structure and where to find information like headers, sending IP, etc.
  - syntax for filters and search introduced
  - (write-up details pending)


TCPdump lab : 30 mins

  - basic syntax and reading outputs
  - tcpdump -D (show available network devices that can be listened to)
  -  -v flag toggles verbose output, key for more information

June 29:
Byte-wise file comparison using Sha256 analysis and CMP to compare the byte position differences between two files.
